if (APPLE)
    project(FBOISInput C CXX OBJC)
else()
    project(FBOISInput C CXX)
endif()

# define header and source files for the library
file(GLOB HEADER_FILES "../../Include/FBOISInput/*.h" "../../Include/FBOISInput/*.hpp" "../../Include/FBOISInput/*.inl")
file(GLOB SOURCE_FILES "../../Source/FBOISInput/*.cpp" "../../Source/FBOISInput/*.c")

set(FB_HEADER_REL_PATH "${FB_ROOT}/FBEngine/cpp/Project/FBOISInput/../../Include/FBOISInput")
set(FB_SOURCE_REL_PATH "${FB_ROOT}/FBEngine/cpp/Project/FBOISInput/../../Source/FBOISInput")

file(GLOB HEADER_FILES_OGRE_INCLUDE_OSX "../../Include/FBOISInput/Extern/OIS/*.h")
file(GLOB SOURCE_FILES_OGRE_INCLUDE_OSX "../../Source/FBOISInput/Extern/OIS/*.cpp")
list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_OSX})
list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_INCLUDE_OSX})

if (WIN32)
    file(GLOB_RECURSE HEADER_FILES_OGRE_INCLUDE_WIN32 "../../Include/FBOISInput/Extern/OIS/win32/*.h")
    file(GLOB_RECURSE SOURCE_FILES_OGRE_SOURCE_WIN32 "../../Source/FBOISInput/Extern/OIS/win32/*.cpp")
    list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_WIN32})
    list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_SOURCE_WIN32})

    file(GLOB_RECURSE HEADER_FILES_OGRE_INCLUDE_WIN32 "../../Include/FBOISInput/Platform/win32/*.h")
    file(GLOB_RECURSE SOURCE_FILES_OGRE_SOURCE_WIN32 "../../Source/FBOISInput/Platform/win32/*.cpp")
    list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_WIN32})
    list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_SOURCE_WIN32})
elseif(APPLE)
    set(CMAKE_MACOSX_RPATH 1)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(FOUNDATION_LIBRARY Foundation)
    find_library(IOKIT_LIBRARY IOKit)
    find_path(COCOA_INCLUDE_DIR Cocoa/Cocoa.h)
    find_library(CARBON_LIBRARY Carbon)

    add_definitions(-x objective-c++)

    file(GLOB_RECURSE HEADER_FILES_OGRE_INCLUDE_OSX "../../Include/FBOISInput/Extern/OIS/mac/*.h")
    file(GLOB_RECURSE SOURCE_FILES_OGRE_INCLUDE_OSX "../../Source/FBOISInput/Extern/OIS/mac/*.cpp" "../../Source/FBOISInput/Extern/OIS/mac/*.mm")
    list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_OSX})
    list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_INCLUDE_OSX})

    file(GLOB_RECURSE HEADER_FILES_OGRE_INCLUDE_OSX "../../Include/FBOISInput/Platform/macOS/*.h")
    file(GLOB_RECURSE SOURCE_FILES_OGRE_INCLUDE_OSX "../../Source/FBOISInput/Platform/macOS/*.cpp" "../../Source/FBOISInput/Platform/macOS/*.mm")
    list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_OSX})
    list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_INCLUDE_OSX})
elseif(UNIX)
    file(GLOB_RECURSE HEADER_FILES_OGRE_INCLUDE_UNIX "../../Include/FBOISInput/Extern/OIS/linux/*.h")
    file(GLOB_RECURSE SOURCE_FILES_OGRE_INCLUDE_UNIX "../../Source/FBOISInput/Extern/OIS/linux/*.cpp")
    list(APPEND HEADER_FILES ${HEADER_FILES_OGRE_INCLUDE_UNIX})
    list(APPEND SOURCE_FILES ${SOURCE_FILES_OGRE_INCLUDE_UNIX})
endif()

foreach(_source IN ITEMS ${HEADER_FILES})
    get_filename_component(_source_file_path "${_source}" DIRECTORY)
    string(REPLACE "${FB_HEADER_REL_PATH}" "" _group_file_path "${_source_file_path}")
    string(REPLACE "/" "\\" _group_file_path "${_group_file_path}")
    source_group("Header Files\\${_group_file_path}" FILES "${_source}")
endforeach()

foreach(_source IN ITEMS ${SOURCE_FILES})
    get_filename_component(_source_file_path "${_source}" DIRECTORY)
    string(REPLACE "${FB_SOURCE_REL_PATH}" "" _group_file_path "${_source_file_path}")
    string(REPLACE "/" "\\" _group_file_path "${_group_file_path}")
    source_group("Source Files\\${_group_file_path}" FILES "${_source}")
endforeach()

if (UNIX)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

include_directories( ${FB_ROOT}/Dependencies/boost )

if (FB_USE_ONETBB)
    include_directories( ${CMAKE_SOURCE_DIR}/Dependencies/onetbb/include )
elseif (FB_USE_TBB)
    include_directories( ${CMAKE_SOURCE_DIR}/Dependencies/tbb/include )
endif()

include_directories( ${FB_ROOT}/Dependencies/tinybind )
include_directories( ${FB_ROOT}/Dependencies/tinyxml )
include_directories( ${FB_ROOT}/Dependencies/utf8/source )
include_directories( ${FB_ROOT}/AdditionalLibraries/zlib )
include_directories( ${FB_ROOT}/AdditionalLibraries/zlib/src )
include_directories( ${FB_ROOT}/AdditionalLibraries/zlib/src/contrib/minizip )
include_directories( ${FB_ROOT}/AdditionalLibraries/zziplib )
include_directories( ../../Include )
include_directories( ../../Include/FBOISInput/Extern )
include_directories( ../../Include/FBOISInput/Extern/OIS )

add_library(FBOISInput STATIC ${HEADER_FILES} ${SOURCE_FILES})
set_target_properties (FBOISInput PROPERTIES FOLDER Engine/Cpp/Input)

if (NOT _FB_STATIC_LIB_)
	target_compile_definitions(FBOISInput PUBLIC FB_EXPORTS)
endif()
