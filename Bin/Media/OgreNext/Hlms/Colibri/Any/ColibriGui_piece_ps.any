@property( colibri_gui )
	@piece( custom_ps_posMaterialLoad )
		@property( hlms_pso_clip_distances < 4 )
			if( inPs.emulatedClipDistance.x < 0 || inPs.emulatedClipDistance.y < 0 ||
				inPs.emulatedClipDistance.z < 0 || inPs.emulatedClipDistance.w < 0 )
			{
				discard;
			}
		@end
	@end
@end

@property( colibri_gui && colibri_text )

@piece( custom_ps_uniformDeclaration )
	@property( !use_read_only_buffer )
		@property( syntax == glsl || syntax == glslvk )
			@property( ogre_version < 2003000 )
				#define vulkan_layout(x)
			@end
			vulkan_layout( ogre_T2 ) uniform samplerBuffer glyphAtlas;
		@end
		@property( syntax == hlsl )
			Buffer<unorm float> glyphAtlas : register(t2);
		@end
		@property( syntax == metal )
			, device const uchar *glyphAtlas [[buffer(TEX_SLOT_START+2)]]
		@end
	@else
		// Vulkan-only because there's only 1 GPU that needs this path (ARM Mali)
		ReadOnlyBufferU( 2, uint, glyphAtlas );
	@end
@end

@piece( custom_ps_preLights )
	@property( syntax == metal )
		uchar glyphCol;
	@else
		float glyphCol;
	@end
	@property( syntax != glsl && syntax != glslvk )
		#define outColour outPs.colour0
	@end
	@property( ogre_version < 2003000 )
		#define diffuseCol outColour
	@end

	@property( ogre_version < 2004000 )
		#define midf_c float
	@end

	@property( !use_read_only_buffer )
		glyphCol = bufferFetch1( glyphAtlas, int( inPs.glyphOffsetStart +
												  uint(floor(inPs.uvText.y) * float(inPs.pixelsPerRow) +
													   floor(inPs.uvText.x)) ) );
	@else
		uint glyphIdxDiv4 = inPs.glyphOffsetStart +
							uint( floor(inPs.uvText.y) * float(inPs.pixelsPerRow) +
								  floor(inPs.uvText.x) );
		const uint glyphSubIdx = glyphIdxDiv4 & 0x3u;
		glyphIdxDiv4 = glyphIdxDiv4 >> 2u;
		const uint glyphColTmp = readOnlyFetch1( glyphAtlas, glyphIdxDiv4 );
		glyphCol = unpackUnorm4x8(glyphColTmp)[glyphSubIdx];
	@end

	@property( syntax == metal )
		diffuseCol.w *= midf_c( unpack_unorm4x8_to_float( glyphCol ).x );
	@else
		diffuseCol.w *= midf_c( glyphCol );
	@end

	@property( ogre_version < 2003000 )
		outColour.xyz = float3( 1.0f, 1.0f, 1.0f );
		@property( hlms_colour )outColour *= inPs.colour @insertpiece( MultiplyDiffuseConst );@end
		@property( !hlms_colour && diffuse )outColour *= material.diffuse;@end
	@end
@end

@end
